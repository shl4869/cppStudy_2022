// 2022cppStudy09.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    std::cout << "\n**연습문제**\n\n" << std::endl;
    std::cout << "1. 템플릿을 이용하면 자료형에 대한 다양성이 존재하는 코드를 만들 수 있습니다.\n하지만 간혹 특정 형식만큼은 다른 규칙의 코드를 적용해야 할 수도 있습니다.\n이런 경우에 사용할 수 있는 문법은 무엇인지 답하세요." << std::endl;
    //템플릿 특수화를 이용하면 특정 자료형을 예외적으로 다르게 처리하는 코드를 작성할 수 있다.
    std::cout << "2. 스마트 포인터 중 auto_ptr의 문제점은 무엇인지 답하세요." << std::endl;
    //auto_ptr는 메모리의 할당과 삭제의 자동화로 인해 배열 생성 시 메모리 해제를 1회만 실행하여 메모리 누수가 발생한다는 문제점이 있으며, shallow copy 시 객체가 삭제되면 복사된 포인터가 접근해야 할 대상이 없어 메모리 오류가 나는데 이 오류를 식별할 방법이 없다.

}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
