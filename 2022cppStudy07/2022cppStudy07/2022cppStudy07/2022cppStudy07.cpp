// 2022cppStudy07.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    std::cout << "\n**연습문제**\n\n" << std::endl;
    std::cout << "1. 가상 함수를 사용하는 가장 큰 이유는 무엇인지 답하세요." << std::endl;
    //현재의 코드에 당장 쓰이지는 않아도 미래에 유지보수 혹은 추가적인 코드를 작성할 때 필요할지도 모르는 함수를 현재 코드의 흐름 속에 명시해두기 위해 사용
    std::cout << "2. 소멸자를 반드시 가상화해야 하는 경우는 어떤 경우인지 답하세요." << std::endl;
    //클래스 A에 대한 파생 클래스 B가 있을 때 생성자는 B의 생성자가 불리지만 소멸자는 A의 소멸자가 불린다. 따라서 A의 소멸자를 가상화해주어 실형식B의 소멸자가 불리게 한다.
    std::cout << "3. 늦은 바인딩에 대해서 답하세요." << std::endl;
    //함수나 변수의 주소가 빌드된 프로그램이 실행되는 도중에 결정되는 것
    std::cout << "4. 순수 가상 함수를 멤버로 갖는 클래스는 순수 가상 클래스입니다.\n이 순수 가상 클래스의 파생 클래스에서 반드시 해야 하는 일은 무엇입니까?" << std::endl;
    //함수의 정의
    std::cout << "5. 다중 상속의 모호성을 회피하려 합니다. 어떤 방법을 이용해야 합니까?" << std::endl;
    //명시적 호출로 함수나 변수를 불러준다 혹은 인터페이스 다중 상속의 경우 기본 클래스를 순수 가상 함수로 만든다. 
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
